#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urllib.parse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from api import Users
from api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == "--help":
    print("")
    print(
        (
            "Usage: "
            + sys.argv[0]
            + " [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]"
        )
    )
    print("")
    print("Functions:")
    print("  void createUser(string username, string password, UserProfile profile)")
    print("  void updateProfile(string username, UserProfile profile)")
    print("  void updatePassword(string username, string newPassword)")
    print("  void deleteUser(string username)")
    print("")
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = "localhost"
port = 9090
uri = ""
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == "-h":
    parts = sys.argv[argi + 1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == "-u":
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += "?%s" % url[4]
    http = True
    argi += 2

if sys.argv[argi] == "-f" or sys.argv[argi] == "-framed":
    framed = True
    argi += 1

if sys.argv[argi] == "-s" or sys.argv[argi] == "-ssl":
    ssl = True
    argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi + 1 :]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    socket = (
        TSSLSocket.TSSLSocket(host, port, validate=False)
        if ssl
        else TSocket.TSocket(host, port)
    )
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Users.Client(protocol)
transport.open()

if cmd == "createUser":
    if len(args) != 3:
        print("createUser requires 3 args")
        sys.exit(1)
    pp.pprint(client.createUser(args[0], args[1], eval(args[2]),))

elif cmd == "updateProfile":
    if len(args) != 2:
        print("updateProfile requires 2 args")
        sys.exit(1)
    pp.pprint(client.updateProfile(args[0], eval(args[1]),))

elif cmd == "updatePassword":
    if len(args) != 2:
        print("updatePassword requires 2 args")
        sys.exit(1)
    pp.pprint(client.updatePassword(args[0], args[1],))

elif cmd == "deleteUser":
    if len(args) != 1:
        print("deleteUser requires 1 args")
        sys.exit(1)
    pp.pprint(client.deleteUser(args[0],))

else:
    print(("Unrecognized method %s" % cmd))
    sys.exit(1)

transport.close()
